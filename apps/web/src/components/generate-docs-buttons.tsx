"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { createSupabaseServerClient } from '@/lib/supabase';
import { useRouter } from 'next/navigation';
import { TablesInsert } from '@/types/database.types';

interface GenerateDocsButtonsProps {
  repositoryId: string;
  repositoryName: string;
}

export function GenerateDocsButtons({ repositoryId, repositoryName }: GenerateDocsButtonsProps) {
  const [generatingDoc, setGeneratingDoc] = useState(false);
  const router = useRouter();

  const generateDocumentation = async (docType: string) => {
    setGeneratingDoc(true);
    try {
      const supabase = await createSupabaseServerClient();
      
      // Generate a simple document (in a real app, this would call an AI service)
      const documentData: TablesInsert<'documents'> = {
        repository_id: repositoryId,
        document_type: docType,
        title: `${docType.replace('_', ' ').toUpperCase()} Documentation`,
        content: `This is a generated ${docType} document for ${repositoryName}.\n\nContent would be generated by an AI service based on the repository analysis.`,
        generated_by: 'system',
        is_current: true
      };

      const { error } = await supabase
        .from('documents')
        .insert(documentData);
        
      if (error) {
        console.error('Error generating documentation:', error);
      } else {
        // Refresh the page to show the new document
        router.refresh();
      }
    } catch (error) {
      console.error('Error generating documentation:', error);
    } finally {
      setGeneratingDoc(false);
    }
  };

  return (
    <>
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 max-w-2xl mx-auto">
        <Button 
          variant="outline" 
          size="sm"
          disabled={generatingDoc}
          onClick={() => generateDocumentation('summary')}
        >
          Summary
        </Button>
        <Button 
          variant="outline" 
          size="sm"
          disabled={generatingDoc}
          onClick={() => generateDocumentation('tech_stack')}
        >
          Tech Stack
        </Button>
        <Button 
          variant="outline" 
          size="sm"
          disabled={generatingDoc}
          onClick={() => generateDocumentation('requirements')}
        >
          Requirements
        </Button>
        <Button 
          variant="outline" 
          size="sm"
          disabled={generatingDoc}
          onClick={() => generateDocumentation('flowchart')}
        >
          Flowchart
        </Button>
        <Button 
          variant="outline" 
          size="sm"
          disabled={generatingDoc}
          onClick={() => generateDocumentation('frontend_guidelines')}
        >
          Frontend
        </Button>
        <Button 
          variant="outline" 
          size="sm"
          disabled={generatingDoc}
          onClick={() => generateDocumentation('backend_structure')}
        >
          Backend
        </Button>
        <Button 
          variant="outline" 
          size="sm"
          disabled={generatingDoc}
          onClick={() => generateDocumentation('app_flow')}
        >
          App Flow
        </Button>
      </div>
      {generatingDoc && (
        <p className="text-sm text-muted-foreground mt-4">
          Generating documentation...
        </p>
      )}
    </>
  );
}